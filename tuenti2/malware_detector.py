#!/usr/bin/python2.7
#-*- coding: utf-8 -*-

import sys
import fractions

def gcd(v):
  return reduce(fractions.gcd, v[1:], v[0])

def norm(x):
  g = gcd(x)
  return [k / g for k in x]

def normMean(N, t):
  mean = [0.0] * N
  for x in t:
    g = gcd(x)
    mean = [m + k for m, k in zip(mean, norm(x))]
  l = len(t)
  mean = [m / l for m in mean]
  return mean

def compute(N, malware, safe, unknown):
  mMean = normMean(N, malware)
  print mMean
  sMean = normMean(N, safe)
  print sMean

  for u in unknown:
    u = norm(u)
    print 'mDiff'
    print sum([(x - m) * (x - m) for m, x in zip(mMean, u)])
    print 'sDiff'
    print sum([(x - m) * (x - m) for m, x in zip(sMean, u)])
    break

  return 0

def main():
  lines = (line for line in sys.stdin)
  R = int(lines.next())
  U = int(lines.next())
  N = int(lines.next())
  malware = []
  safe = []
  for _ in xrange(R):
    data = lines.next().strip().split()[:N + 1]
    if data[0] == 'M':
      malware.append(map(int, data[1:]))
    elif data[0] == 'S':
      safe.append(map(int, data[1:]))
  unknown = []
  for _ in xrange(U):
    unknown.append(map(int, lines.next().strip().split()[:N + 1]))

  print compute(N, malware, safe, unknown)

if __name__ == '__main__':
  main()

